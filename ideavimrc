"<c-s-;> :start actjump
"""""""""""""""""""""""""""""""""""
" <c-m> minimize the current window
""""""""""""""""""""""""""""""""""""""""""""""""
"qa            : record keystrokes to register a
"your commands
"q             : quit recording
"@a            : execute commands again
"@@            : repeat
"""""""""""""""""""""""""""""""""""""180
"<c-x> in normal mode to subtract from the current number
""""""""""""""""""""""""""""""""""""""
":reg display contents of all registers
"1p      : paste from register 1
"<C-r>0 paste the content of the register 0
"procticcal Vim, by Drew Neil
"Read Drew Neil's book,
""""""""""""""""""""""""""""""""""""""
"insert mode
"<C-r> = 7*22 <CR>  = 154 : insert 154
""""""""""""""""""""""""""""""""""""""
" gi got to the last place you left insert mode
""""""""""""""""""""""""""""""""""""""""""""""""
"" Base Settings
"" ========================================================
"command mode
" moving a set of Lines with the :m command
" '<,>'m29<CR>
" '<,>'normal I//  : add // to beginning range of lines
" '<,>'normal A//  : add // to ending range of lines
""""""""""""""

set scrollo"ff=10
set nu     "
set linenum"ber
set multipl"e-cursors
set relativ"enumber
set textobj"-entire
set argtext"obj
set history"=3000000
set ideasta"tusicon=gray
"That is, s"uch as 'daa'(delete-an-argument) 'cia'(change-inner-argument) 'via'(select-inner-argument).
let g:argum"entobject_force_toplevel = 1
let g:argte"xtobj_pairs="[:],(:),<:>"
"按esc顺便取消高亮"
nnoremap <e"sc> <esc>:noh<return>
set smartca"se
set visualb"ell
set showmod"e
set showcmd"
set ignorecase
set hlsearch
set incsearch
set noerrorbells
"======================commentary==================================
"set comentary 使用技巧: gcat 选中代码块，然后gc注释代码块,gc取消注释代码块
set commentary
"========================================================
set matchit
let b:match_words='\<begin\>:\<end\>,'
\. '\<module\>:\<endmodule\>,'
\. '\<class\>:\<endclass\>,'
\. '\<fork\>:\<join\>,'
\. '\<task\>:\<endtask\>,'
\. '\<function\>:\<endfunction\>,'
\. '\<if\>:\<else if\>:\<else\>,'
\. '\<if\>:\<else\>,'
\. '\<ifdef\>:\<endif\>,'
\. '\<ifndef\>:\<endif\>,'
\. '\<ifdef\>:\<elsif\>:\<endif\>,'
\. '\<program\>:\<endprogram\>,'
\. '\<while\>:\<continue\>:<break\>:\<endwhile\>'
let b:matchit_ignorecase=1
"=======================quickscope=================================
"Normally the { and } motions only match completely empty lines. With this plugin lines that only contain whitespace are also matched.
set quickscope
"========================================================
set vim-paragraph-motion
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:qs_primary_color = '#ff0000'
let g:qs_secondary_color = '#ff00ff'
let g:qs_accepted_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q']
"Use system clipboard
set clipboard+=unnamed
let mapleader = " "
"共享系统粘贴板
set clipboard=unnamedplus
"" Plugin Settings
"========================================================
"ysiw[：将光标所在的单词用中括号[]环绕。
"cs"{：将光标所在位置的一对双引号更改为大括号{}。
"ds)：删除光标所在位置的一对圆括号()。
"ysiw"：将光标所在的单词用双引号""环绕。
"ysit"：将光标所在的单词用标签<>环绕。
"ysat"：将光标所在的单词用标签<>环绕，并且包括标签。
"cst <div>：将光标所在位置的一对标签更改为<div>。
"dst : 删除光标所在位置的一对标签。
"选中需要surround的字段，大写的S，然后输入需要的符号
"hr= "dic.form" - sum 如果是带.的  用ysiW 或者
"或者 viW S"
set surround
"====================highlightedyank====================================
set highlightedyank
let g:highlightedyank_highlight_color = "rgba(24, 241, 187)"
let g:highlightedyank_highlight_duration = 800
let g:highlightedyank_max_lines = 1000
let g:highlightedyank_highlight_in_visual = 0
"========================================================

"set sneak
set nerdtree
"Easymotion settings
set easymotion
set notimeout
"Which-key settings
set which-key
"let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKeyDesc_leader = "<leader>x Open file explorer"
let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_GotoNextError = "ge 跳转到下一个错误或警告"
let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"
let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"
let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>ll Show recent locations"
let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"
let g:WhichKeyDesc_goto = "<leader>g Go to X"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"
let g:WhichKeyDesc_git = "<leader>g Git operations"
let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit dialog"
let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"
let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"
let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"
"================================================================================================
"🌍🌍🌍 No Leader Keymaps 🌍🌍🌍
"================================================================================================
"--普通模式下使用回车键，向下/向上 增加一行
nmap <CR> o<Esc>
nmap <S-Enter> O<Esc>

"--在普通和插入模式下，向下交换行/向上交换行
nnoremap <C-j> :m +1<CR>
nnoremap <C-k> :m -2<CR>
inoremap <C-j> <Esc> :m +1<CR>gi
inoremap <C-k> <Esc> :m -2<CR>gi
xnoremap <C-j> :m '>+1<cr>gv=gv
xnoremap <C-k> :m '<-2<cr>gv=gv
"" Key mappings
nmap <Home> ^
imap <Home> ^
"Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j
"Jump between methods
nnoremap [[ :action MethodUp<cr>
nnoremap ]] :action MethodDown<cr>
"========== p ==========
"从剪切板粘贴到下面行
let g:WhichKeyDesc_PasteClipboardDown = "<leader>p 从剪切板粘贴到下面行"
nmap <leader>p "+p
"从剪切板粘贴到上面行
let g:WhichKeyDesc_PasteClipboardUp = "<leader>P 从剪切板粘贴到上面行"
nmap <leader>P "+P
"在可视模式中：从剪切板粘贴到下面n行
let g:WhichKeyDesc_PasteClipboardDown = "<leader>p 从剪切板粘贴到下面行"
vmap <leader>p "+p
"在可视模式中：从剪切板粘贴到上面行
let g:WhichKeyDesc_PasteClipboardUp = "<leader>P 从剪切板粘贴到上面行"
vmap <leader>P "+P
"将光标移动到上一个方法的声明处
"last changed in current buffer(file)
nmap gm <action>(MethodUp)
let g:WhichKeyDesc_MethodUp = "gm 将光标移动到上一个方法的声明处"
"在可视模式中：删除选择的文本并复制到剪切板
let g:WhichKeyDesc_DebugOrDelete_DeleteAndCopyToClipboard = "<leader>dd 删除并复制到剪切板"
vmap <leader>dd "+d
"Easy visual indentation
vnoremap < <gv
vnoremap > >gv
"Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)
"" Leader commands
"" ========================================================
"Jump around with easymotion
"map <leader>j <Plug>(easymotion-s)
"================================================================================================
"🌸🌸🌸 Easymotion 🌸🌸🌸
"================================================================================================
"let g:WhichKeyDesc_easymotionkey = "<leader><leader> 快速跳转插件"
nmap s <Plug>(easymotion-s2)
let g:WhichKeyDesc_easymotion = "s 快速跳转"
"================================================================================================
"🌸🌸🌸 NERDTree 🌸🌸🌸
"================================================================================================
"<C-w-w>：在多个打开的编辑器窗口之间切换
"在目录中，按下 go 打开文件并保持光标在目录
"在目录中，按下 gi 以上下并排窗口形式打开文件(并关闭目录)
"在目录树中，使用空格预览文件
"光标在目录时，按Esc回到编辑器
"编辑器和目录间切换存在许多功能类似的快捷键，相似但不完全相同
"========== c ==========
let g:WhichKeyDesc_CodeAndClose = "<leader>c Code&关闭"
"关闭所有标签页
let g:WhichKeyDesc_CodeAndClose_CloseAllEditors = "<leader>ca 关闭所有标签页"
nmap <leader>ca <action>(CloseAllEditors)
"关闭当前标签页
let g:WhichKeyDesc_CodeAndClose_CloseEditor = "<leader>cd 关闭当前标签页"
nmap <leader>cd :action CloseEditor<CR>
"代码自动补全
let g:WhichKeyDesc_CodeAndClose_CodeCompletion = "<leader>cc 代码自动补全"
nmap <leader>cc <action>(CodeCompletion)

"按下 <leader>nn 将使焦点转移到 NERDTree 窗口
nnoremap <leader>nn :NERDTreeFind<CR>
let g:WhichKeyDesc_NERDTreeOrNo_NERDTreeFind = "<leader>nn 跳转到当前文件在目录树中的位置"
"Open NERDTree (use q to exit)
map <leader>x :NERDTreeToggle<CR>
"按下 <C-n> 将打开 NERDTree 文件资源管理器(==<leader>nn
"nnoremap <C-n> :NERDTree<CR>
"按下 <C-t> 将切换 NERDTree 文件资源管理器的显示状态，即打开或关闭 NERDTree(不建议)
nnoremap <C-t> :NERDTreeToggle<CR>
"按下 <leader>nl 将跳转到当前文件在 NERDTree 文件资源管理器中的位置
map <leader>nl :NERDTreeFind<CR>
let g:WhichKeyDesc_NERDTreeOrNo_NERDTreeFind = "<leader>nl 跳转到当前文件在目录树中的位置"
"Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)

"Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)
"File navigation
"快速 导航/查找 项目中的其他文件(Ctrl + n)
"let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff 查找文件"
"nmap <leader>ff <action>(GotoFile)
"将当前编辑的文件在项目视图中进行选中定位(Alt + F1)
"在整个项目中查找指定的文本、关键字或正则表达式，包括代码文件、配置文件和其他文件等(Ctrl + Shift + F)
let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft 查找字符"
nmap <leader>ft <action>(FindInPath)
let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>ll 定位文件位置"
"打开 "Find Action"（查找动作）对话框(Ctrl + Shift + A)
let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc 打开查找菜单"
"重新格式化代码，使其符合预定义的代码样式和规范 | 优化导入语句，删除未使用的导入，并将导入语句按字母顺序进行排列
let g:WhichKeyDesc_FindOrFormat_Format = "<leader>ff 格式化代码"
nmap <leader>ff <action>(ReformatCode) | <action>(OptimizeImports)
nmap <leader>fc <action>(GotoAction)
nmap <leader>fl <action>(SelectInProjectView)
map <leader>fr <action>(RecentFiles)
"map <leader><leader> <Action>(RecentFiles)
map <leader>ll <action>(RecentLocations)
"Close active tab
map <leader>q <action>(CloseContent)
"Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)
"Git windows
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)
"Errors
"跳转到下一个错误或警告
nmap ge <action>(GotoNextError)
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)
set ReplaceWithRegister
"替换寄存器内容功能
"假设你想要替换一个段落中的某个词语 "oldword" 为 "newword"：
"首先，将 "newword" 复制到寄存器中。将光标放到 "newword" 上，然后输入 yiw。
"HH然后，移动光标到 "oldword" 上，并输入 griw。这会用 "newword" 替换 "oldword"。
"如果你想要替换整个文件中的 "oldword"，可以使用 gRiw。
set exchange
"文本交换功能（类似 vim-exchange 插件）
"假设你有两个词 "bar" 和 "foo"，并想要交换它们的位置：
"bar foo
"将光标移动到 "foo" 上，然后输入 cxiw 来标记 "foo"。
"将光标移动到 "bar" 上，再次输入 cxiw，"foo" 和 "bar" 的位置就会交换。用 .  重复键就可以重复这个操作。
"如果你想要交换两个tag的位置，可以使用cxat
"如果你想要交换两个句子的位置，可以使用cxas
"后退，仅仅改变光标位置
"通过添加这些配置到你的 .ideavimrc 文件中，你可以利用 Ctrl + o 和 Ctrl + i（如果环境支持）在 JetBrains IDE 中使用 IdeaVim 插件时，快速在代码的不同位置之间前进和后退，类似于在浏览器中导航页面一样。这种快捷键的自定义提高了在 IDE 中的导航效率，尤其是在进行大量代码阅读和修改时。
"保留 IdeaVim 默认前进
nnoremap g<C-i> <C-i>
"保留 IdeaVim 默认后退
"内置搜索优化
nnoremap g/ :action Find<cr>
"保留 IdeaVim 默认搜索
"映射gs 到ide的替换功能
"nmap gs :action Replace<CR>
"let g:WhichKeyDesc_Replace = "gs 替换"
"映射gc 到ide的替换功能
"nmap gh :action Replace<CR>
"let g:WhichKeyDesc_Replace = "gh 替换"
"格式化代码
map H h
map L l
"Toggle case and start typing. E.g. <leader>iget: property -> getProperty
map <leader>i ~hi
map <leader>J Ji <ESC>
"Yank to the last character of the Line
nnoremap Y yg_
"gR replace 当前字符到行尾
nmap gR gr$
nnoremap y_ y^
"删除 从光标到行首
nnoremap d_ d^
nnoremap c_ c^
"重放EX命令
nnoremap <leader>. @:
nnoremap <Leader>sr :%s///gcI<left><left><left><left><left>
vnoremap sr y:%s///gcI<left><left><left><left><left><C-r>0<right>
"选中单词后,ss 会快速跳到下一个相同的单词
vnoremap ss y/<C-r>0<CR>
"Remove selection and toggle case. E.g. v2l<leader>u: getProperty -> property
vmap <leader>u d~h
nnoremap U <C-r>
nmap <leader>t <Action>(ActivateTerminalToolWindow)
nnoremap <leader>aa :action ShowIntentionActions<CR>
"在源代码和测试代码之间快速切换
nmap gt <action>(GotoTest)
let g:WhichKeyDesc_GotoTest = "gt 在源代码和测试代码之间快速切换"
"bookmark 切换书签
let g:WhichKeyDesc_bookmark = "mm 书签"
"显示书签（Bookmarks）工具窗口，其中包含当前文件中设置的书签列表(Ctrl + F11)
let g:WhichKeyDesc_Show_Bookmarks = "<leader>bm 显示书签工具窗口"
let g:WhichKeyDesc_Show_Bookmarks = "<leader>bb 显示书签工具窗口"
"nmap <leader>bb <action>(ShowBookmarks)
nmap `2 <action>(ShowBookmarks)
nnoremap <leader><enter> :action ShowBookmarks<CR>
nnoremap <Leader>, :action RecentFiles<CR>
vnoremap <Leader>, :action RecentFiles<CR>
nnoremap <leader>ns :action NewScratchFile<CR>
vnoremap <leader>ns :action NewScratchFile<CR>
nnoremap <leader>nc :action Scratch.ChangeLanguage<CR>
vnoremap <leader>nc :action Scratch.ChangeLanguage<CR>
"VCS
nnoremap <Leader>gg :action ActivateCommitToolWindow<CR>
nnoremap <leader>go :action Vcs.QuickListPopupAction<CR>
nnoremap <leader>gF :action Vcs.UpdateProject<CR>
nnoremap <leader>ga :action Annotate<CR>
nnoremap <leader>gl :action Vcs.Show.Log<CR>
unmap <leader>gs
nnoremap <leader>gss :action Git.Stash<CR>
nnoremap <leader>gsu :action Git.Unstash<CR>
nnoremap <leader>gr :action Vcs.RollbackChangedLines<CR>
unmap <leader>gf
nnoremap <leader>gf :action Git.Fetch<CR>
nnoremap <leader>gf :action Vcs.ShowTabbedFileHistory<CR>
nnoremap gtt :action GotoTest<CR>
vnoremap gtt :action GotoTest<CR>
nnoremap gD :action FindUsages<CR>
vnoremap gD :action FindUsages<CR>
nnoremap gtd :action GotoTypeDeclaration<CR>
vnoremap gtd :action GotoTypeDeclaration<CR>
nnoremap <Leader>hc :action CallHierarchy<CR>
"noremap <Leader>in :action Inline<CR>
nnoremap <leader>mrin    :action Inline<CR>
vnoremap <leader>mrin    <Esc>:action Inline<CR>

"noremap <Leader>ev :action IntroduceVariable<CR>
nnoremap <leader>mrev    :action IntroduceVariable<CR>
vnoremap <leader>mrev    <Esc>:action IntroduceVariable<CR>

"noremap <Leader>ep :action IntroduceParameter<CR>
nnoremap <leader>mrep    :action IntroduceParameter<CR>
vnoremap <leader>mrep    <Esc>:action IntroduceParameter<CR>

"noremap <Leader>ec :action IntroduceConstant<CR>
nnoremap <leader>mrec    :action IntroduceConstant<CR>
vnoremap <leader>mrec    <Esc>:action IntroduceConstant<CR>

"noremap <Leader>ef :action IntroduceField<CR>
nnoremap <leader>mref    :action IntroduceField<CR>
vnoremap <leader>mref    <Esc>:action IntroduceField<CR>

"noremap <Leader>em :action ExtractMethod<CR>
"(gh = go to header)
"gg     = go to beginning
"mx     = sets a mark, so we can jump back
"z<CR>  = Scrolls to te Top
"5<C-y> = scrolls the window 5 lines
"`x     = jumps back to our mark
nmap gh gg<Action>(MethodDown)mxz<CR>5<C-y>`x
nmap <Leader>gg <Action>(ActivateCommitToolWindow)
nmap L <action>(NextTab)
nmap H <action>(PreviousTab)
"将Ctrl + s 映射为保存文档(也可以在VIM设置里将此快捷键设置为IDEA的快捷键)
nmap <C-S> <action>(SaveAll)
imap <C-S> <Esc><action>(SaveAll)
"e: Extract
"extract method/function 将选中的代码片段提取为一个独立的方法(Ctrl + Alt + M)
vmap <leader>em <action>(ExtractMethod)
let g:WhichKeyDesc_ExtractMethod = "<leader>em 提取方法"
vmap <leader>ec <action>(IntroduceConstant)
let g:WhichKeyDesc_ExtractConstant = "<leader>ec 提取常量"
"extract field （引入字段）的重构操作:将选中的代码片段转化为一个新的字段，并自动将选中的代码片段替换为对该字段的引用(Ctrl + Alt + F)
vmap <leader>ef <action>(IntroduceField)

let g:WhichKeyDesc_ExtractField = "<leader>ef 引入字段"
"extract variable （引入变量）的重构操作:将选中的代码片段抽取为一个新的变量，并自动替换选中的代码片段为新的变量引用(Ctrl + Alt + V)
vmap <leader>ev <action>(IntroduceVariable)
let g:WhichKeyDesc_ExtractVariable = "<leader>ev 引入变量"
"========== s ==========
let g:WhichKeyDesc_Show = "<leader>s 显示&停止"
"显示当前打开文件的文件结构弹出窗口，其中包含文件中的类、方法、字段等结构(Alt + 7)
let g:WhichKeyDesc_Show_FileStructure = "<leader>ss 显示文件结构"
nmap <leader>ss <action>(FileStructurePopup)

"用于显示方法或函数的参数信息(Ctrl + p)
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sp 显示方法或函数的参数信息"
nmap <leader>sp <action>(ParameterInfo)
"Stop
let g:WhichKeyDesc_Show_Stop = "<leader>st 停止运行"
nmap <leader>st <action>(Stop) <actios(Stop)
"========== z ==========
let g:WhichKeyDesc_Zip = "<leader>z 折叠"
"展开所有代码折叠区域(Ctrl + Shift + 加号键)
let g:WhichKeyDesc_Zip_unZipAll = "zo 展开所有折叠"
nmap zo <action>(ExpandAllRegions)
nmap zx <action>(CollapseRegion)
"折叠所有代码折叠区域(Ctrl + Shift + 减号键)
nmap zc <action>(ExpandRegion)
"========== w ==========
"Vim 的命令 :e, :sp, :vsp 是支持的。
"关闭其他标签页
let g:WhichKeyDesc_CodeAndClose_CloseAllEditorsButActive = "zq 关闭其他标签页"
nmap zq <action>(CloseAllEditorsButActive)
"向右拆分标签页
let g:WhichKeyDesc_Windows_Move_MoveTabRight = "zr 向右拆分标签页"
nmap zr <action>(MoveTabRight)
"向下拆分标签页
let g:WhichKeyDesc_Windows_Move_MoveTabDown = "zd 向下拆分标签页"
nmap zd <action>(MoveTabDown)
"在另一边打开（前提是有另一边的分割窗口）
let g:WhichKeyDesc_Windows_Move_MoveEditorToOppositeTabGroup = "zm 在另一边打开"
nmap zm <action>(MoveEditorToOppositeTabGroup)
nmap z/ <action>(MoveEditorToOppositeTabGroup)
"向右复制标签页
let g:WhichKeyDesc_Windows_Move_SplitVertically = "zv 竖向分割"
nmap zv <action>(SplitVertically)
"水平分割
let g:WhichKeyDesc_Windows_Move_SplitHorizontally = "zs 水平分割"
nmap zs <action>(SplitHorizontally)
"取消所有分割窗口
let g:WhichKeyDesc_Windows_UnsplitAll = "za 取消所有分割窗口"
nmap za <action>(UnsplitAll)
"关闭当前窗口或分割窗格
"取消拆分当前分割窗口
let g:WhichKeyDesc_Windows_Unsplit = "zu 取消拆分当前分割窗口"
nmap zu <action>(Unsplit)
"关闭提示窗口
"========== n ==========
let g:WhichKeyDesc_NERDTreeOrNew = "<leader>n 目录树&新建"
"在当前目录新建文件夹
let g:WhichKeyDesc_NERDTreeOrNew_NewDir = "<leader>nd 新建文件夹"
nmap <leader>nd <action>(NewDir)
"在当前目录新建文件
let g:WhichKeyDesc_NERDTreeOrNew_NewFile = "<leader>nf 新建文件"
nmap <leader>nf <action>(NewFile)
"在当前目录新建类
let g:WhichKeyDesc_NERDTreeOrNew_NewClass = "<leader>nc 新建scratch文件"

"====================debug&&run====================================
let g:WhichKeyDesc_RunOrRe = "<leader>r 运行&重新"
"运行当前编辑器中的文件或类(Shift + F10)
let g:WhichKeyDesc_RunOrRe_RunCalss = "<leader>rc 运行当前文件"
nmap <leader>rc :action RunClass<CR>
"重新运行最近一次运行的程序或测试(Ctrl+Shift + F10)
"重新运行最近一次运行的测试（Unit Tests）(Ctrl + Shift + F10)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt 重新运行Test"
nmap <leader>rt <action>(RerunTests)
"在代码中快速更改一个标识符的名称，并自动处理所有相关的引用(Shift + F6)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn 重构"
map <leader>rn <action>(RenameElement)
"运行
let g:WhichKeyDesc_RunOrRe_Run = "<leader>ru 运行"
map <leader>ru <action>(Run)
"打断点/解除断点
let g:WhichKeyDesc_DebugOrDelete_BreakPoint = "<leader>dp 打断点/解除断点 "
nmap <leader>dp <Action>(ToggleLineBreakpoint)
"调试
let g:WhichKeyDesc_DebugOrDelete_DeBug = "<leader>db 调试"
nmap <leader>db <Action>(Debug)
"====================debug&&run====================================
"使用idea的join代替原始的j
set ideajoin
nmap <Home> ^
imap <Home> ^
"跳转到行内下一个指定字符
nmap <leader><leader>f <Plug>(easymotion-bd-f)
let g:WhichKeyDesc_easymotion_f = "<leader><leader>f 跳转到行内下一个指定字符"
"跳转到行内上一个指定字符
nmap <leader><leader>F <Plug>(easymotion-F)
let g:WhichKeyDesc_easymotion_F = "<leader><leader>F 跳转到行内上一个指定字符"
"跳转到行内下一个指定字符前的位置
nmap <leader><leader>t <Plug>(easymotion-bd-t)
let g:WhichKeyDesc_easymotion_t = "<leader><leader>t 跳转到行内下一个指定字符前的位置"
"跳转到行内上一个指定字符后的位置
nmap <leader><leader>T <Plug>(easymotion-bd-T)
let g:WhichKeyDesc_easymotion_T = "<leader><leader>T 跳转到行内上一个指定字符后的位置"
"快速前进到下一个单词开头
nmap <leader><leader>w <Plug>(easymotion-bd-w)
let g:WhichKeyDesc_easymotion_w = "<leader><leader>w 快速前进到下一个单词开头"
"快速后退到上一个单词开头
nmap <leader><leader>W <Plug>(easymotion-bd-W)
let g:WhichKeyDesc_easymotion_W = "<leader><leader>W 快速后退到上一个单词开头"
"快速前进到下一个单词结尾
nmap <leader><leader>b <Plug>(easymotion-bd-b)
let g:WhichKeyDesc_easymotion_b = "<leader><leader>b 快速前进到下一个单词结尾"
"快速后退到上一个单词结尾
nmap <leader><leader>B <Plug>(easymotion-bd-B)
let g:WhichKeyDesc_easymotion_B = "<leader><leader>B 快速后退到上一个单词结尾"
"向前跳转到单词结尾
nmap <leader><leader>e <Plug>(easymotion-bd-e)
let g:WhichKeyDesc_easymotion_e = "<leader><leader>e 向前跳转到单词结尾"
"向后跳转到单词结尾
nmap <leader><leader>E <Plug>(easymotion-bd-E)
let g:WhichKeyDesc_easymotion_E = "<leader><leader>E 向后跳转到单词结尾"
"向前跳转到单词结尾（排除行尾）
nmap <leader><leader>ge <Plug>(easymotion-ge)
let g:WhichKeyDesc_easymotion_ge = "<leader><leader>ge 向前跳转到单词结尾（排除行尾）"
"向后跳转到单词结尾（排除行尾）
nmap <leader><leader>gE <Plug>(easymotion-gE)
let g:WhichKeyDesc_easymotion_gE = "<leader><leader>gE 向后跳转到单词结尾（排除行尾）"
"向下跳转到行首
nmap <leader><leader>j <Plug>(easymotion-bd-jk)
nmap <leader>jj <Plug>(easymotion-bd-jk)
let g:WhichKeyDesc_easymotion_j = "<leader><leader>j 向下跳转到行首"
"向上跳转到行首
nmap <leader><leader>k <Plug>(easymotion-k)
let g:WhichKeyDesc_easymotion_k = "<leader><leader>k 向上跳转到行首"
"查找下一个与最后一个查找项匹配的单词

"查找上一个与最后一个查找项匹配的单词
nmap <leader><leader>N <Plug>(easymotion-bd-N)
let g:WhichKeyDesc_easymotion_N = "<leader><leader>N 查找上一个与最后一个查找项匹配的单词"
"跳转到任意位置
nmap <leader><leader>s <Plug>(easymotion-bd-s)
let g:WhichKeyDesc_easymotion_s = "<leader><leader>s 跳转到任意位置"
"easymotion-jumptoanywhere
nmap <leader><leader>z <Plug>(easymotion-jumptoanywhere)
let g:WhichKeyDesc_easymotion_z = "<leader><leader>z easymotion-jumptoanywhere"
"easymotion-vim-n
nmap <leader><leader>n <Plug>(easymotion-vim-n)
let g:WhichKeyDesc_easymotion_n = "<leader><leader>v easymotion-vim-n"
"easymotion-vim-N
nmap <leader><leader>N <Plug>(easymotion-vim-N)
let g:WhichKeyDesc_easymotion_N = "<leader><leader>N easymotion-vim-N"
nmap <leader><leader>l <Plug>(easymotion-bd-fl)
let g:WhichKeyDesc_easymotion_L = "<leader><leader>L easymotion-fl"
"给surround做whichkey的描述
"<q>hello world!</q>
"hello world!
let g:WhichKeyDesc_surround_y = "y 增加tag surround插件"
let g:WhichKeyDesc_surround_ys = "ys 用于surround插件"
let g:WhichKeyDesc_surround_ysi = "ysi 用于surround插件"
let g:WhichKeyDesc_surround_yss = "yss 用于surround插件"
let g:WhichKeyDesc_surround_ysiw = "ysiw 用于surround插件"
let g:WhichKeyDesc_surround_yssb = "yssb 用于surround插件"
let g:WhichKeyDesc_surround_c = "c 用于surround插件"
let g:WhichKeyDesc_surround_cs = "cs 更改 surround插件"
let g:WhichKeyDesc_surround_cst = "cst 更改tag surround插件"
let g:WhichKeyDesc_surround_d = "d 用于surround插件"
let g:WhichKeyDesc_surround_ds = "ds 删除 surround插件"
"映射C-H 为ide的替换功能
nmap <C-H> :action Replace<CR>
"==============================================
"Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
"说明： 在普通模式下，按下 Ctrl+n 将会选中整个当前单词，并将光标移动到文档中下一个相同单词的位置。
"说明： 在可视模式下，按下 Ctrl+n 也会将光标移动到下一个相同的整个单词。
"hello world
"helloii world
"testing multiple cursors in IdeaVim
"hello world
"try multiple cursors
"hello world
"multiple examples to try
"hello NextWholeOccurrence 是完全匹配,而 NextOccurrence 是部分匹配
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <A-n> <Plug>AllWholeOccurrences
xmap <A-n> <Plug>AllWholeOccurrences
nmap g<A-n> <Plug>AllOccurrences
xmap g<A-n> <Plug>AllOccurrences
map <tab><tab> <action>(RecentLocations)
nmap == <action>(ReformatCode)
nmap `` <action>(FileStructurePopup)
" add bookmark
nmap `1 <action>(ToggleBookmark)
nmap <c-m> <action>(ToggleBookmark)
nmap <tab>q <Action>(GotoImplementation)
map <leader>nb :NERDTreeFromBookmark
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'enable', 'disable', 'show', 'hide', 'open', 'close', 'start', 'stop', 'begin', 'end', 'lock', 'unlock', 'expand', 'collapse', 'increase', 'decrease', 'increment', 'decrement', 'connect', 'disconnect', 'mount', 'unmount', 'press', 'release', 'accept', 'reject', 'add', 'remove', 'insert', 'delete', 'create', 'destroy', 'load', 'unload', 'on', 'off', 'up', 'down', 'visible', 'invisible', 'fixed', 'flexible', 'light', 'dark', 'next', 'previous', 'forward', 'backward', 'allow', 'deny', 'enabled', 'disabled', 'positive', 'negative', 'ascending', 'descending', 'valid', 'invalid', 'synchronous', 'asynchronous', 'active', 'inactive', 'serialize', 'deserialize', 'compress', 'decompress', 'encrypt', 'decrypt', 'expand', 'contract', 'zoomin', 'zoom-out', 'push', 'pull', 'flash', 'steady', 'manual', 'automatic','True', 'False', 'Enable', 'Disable', 'Show', 'Hide', 'Open', 'Close', 'Start', 'Stop', 'Begin', 'End', 'Lock', 'Unlock', 'Expand', 'Collapse', 'Increase', 'Decrease', 'Increment', 'Decrement', 'Connect', 'Disconnect', 'Mount', 'Unmount', 'Press', 'Release', 'Accept', 'Reject', 'Add', 'Remove', 'Insert', 'Delete', 'Create', 'Destroy', 'Load', 'Unload', 'On', 'Off', 'Up', 'Down', 'Visible', 'Invisible', 'Fixed', 'Flexible', 'Light', 'Dark', 'Next', 'Previous', 'Forward', 'Backward', 'Allow', 'Deny', 'Enabled', 'Disabled', 'Positive', 'Negative', 'Ascending', 'Descending', 'Valid', 'Invalid', 'Synchronous', 'Asynchronous', 'Active', 'Inactive', 'Serialize', 'Deserialize', 'Compress', 'Decompress', 'Encrypt', 'Decrypt', 'Expand', 'Collapse', 'Zoomin', 'Zoomout', 'Push', 'Pull', 'Flash', 'Steady', 'Manual', 'Automatic','last','first','Last','First']
  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction


nnoremap gX :set opfunc=Redact<CR>g@
nnoremap gx :set opfunc=function('Redact')<CR>g@
nnoremap gy :set opfunc={arg -> execute "normal `[v`]rx"}<CR>g@
function! Redact(type)
    execute "normal `[v`]rx"
endfunction

nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

" CamelCaseMotion approximation (obsolete with WIP proper CamelCaseMotoin plugin)
" Missing inner word motions e.g. i<leader>w
nmap <leader>w [w
nmap <leader>b [b
nmap <leader>e ]w
nmap <leader>ge ]b
" let g:camelcasemotion_key='<leader>'
" set CamelCaseMotion

" CCM's inner motions are a bit weird. Arguably, they should be an actual text object,
" like how vim-text-obj-variable-segment does it. On the other hand v[count]i\b can't
" be done without a motion. These maps give us best of both worlds
" xnoremap iv i\e
" onoremap iv i\e
" xnoremap av i\w
" onoremap av i\w
nnoremap <Leader>z :action ToggleZenMode<CR>
vnoremap ++ :NERDTreeFind<CR>
nnoremap ++ :NERDTreeFind<CR>
vnoremap gf :NERDTreeFind<CR>
nnoremap gf :NERDTreeFind<CR>
nnoremap 00 :action ToggleZenMode<CR>
vnoremap 00 :action ToggleZenMode<CR>
nmap \\\\ :action GotoImplementation<CR>
"shift zz  是关闭现在的窗口
nmap <BS> :action JumpToLastChange<CR>
nmap <S-BS> :action JumpToNextChange<CR>
nmap -- :action MoveEditorToOppositeTabGroup<CR>
nmap <tab>w :action RecentChanges<CR>
"After block yank and paste, move cursor to the end of operated text and don't override register
vnoremap p "_dP`]
nnoremap p p`]
"Y yank whole line by default
vnoremap y ygv<Esc>$
nnoremap Y y$

"在普通模式下，按 x 删除单个字符，不放入默认寄存器
"在普通模式下，按 x 删除单个字符，不放入默认寄存
nnoremap x "_x


"在普通模式下，将 X 变为删除操作符，不污染默认寄存器
nmap X "_d

"XX 删除整行，不放入默认寄存器
nmap XX "_dd

"在可视模式下，X 和 x 删除选中内容，不放入默认寄存器
vmap X "_d
vmap x "_d
" don't yank to default register when changing something
nnoremap c "xc
xnoremap c "xc

" Change line, better use S for this.
nmap cc 1S
" Copy Word
nmap ,c yiw
" Select word
nmap ,v viw
" Yank and paste from clipboard
nnoremap ,y "+y
vnoremap ,y "+y
nnoremap ,yy "+yy
nnoremap ,p "+p
" Reselect last-pasted text
nnoremap gp `[v`]
" Center screen when jumping to next match
nnoremap n nzz
nnoremap N Nzz
vnoremap n nzz
vnoremap N Nzz
" Center screen when moving up and down
nnoremap <C-u> <C-u>zz
nnoremap <C-o> <C-d>zz
vnoremap <C-u> <C-u>zz
vnoremap <C-o> <C-d>zz
" easy window navigation
nnoremap <a-k> gT
nnoremap <a-j> gt
nnoremap <c-s-tab> gT
nnoremap <c-tab> gt
" stuff
:map <leader>er <Action>(QuickJavaDoc)
:map <leader>ee <Action>(ShowErrorDescription)
:map <leader>hh <Action>(QuickImplementations)
:map <leader>hj <Action>(ShowHoverInfo)
" breakpoints
:map <leader>ub <Action>(ToggleLineBreakpoint)
:map <leader>us <Action>(ViewBreakpoints)
:map <leader>ur <Action>(Debugger.RemoveAllBreakpoints)
" bookmarks
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"
" comment out
:map <leader>cl <Action>(CommentByLineComment)
:map <leader>cb <Action>(CommentByBlockComment)

" copy whole file
nmap <C-a> ggVG"+y
" built-in navigation to navigated items works better
":nmap <c-o> <Action>(Back)
":nmap <c-i> <Action>(Forward)
" reactivate some IDEA shortcuts
:map <c-n> <Action>(SearchEverywhere)
:map <leader>1 <Action>(Run)
:map <leader>2 <Action>(Debug)
:map <leader>0 <Action>(Stop)
" code Refactoring
:map <leader>rr <Action>(RenameElement)
:map <leader>RR <Action>(Refactorings.QuickListPopupAction)
:map <leader>sw <Action>(SurroundWith)
:map <leader>oi <Action>(OptimizeImports)
" other things
:map <leader>an <Action>(Annotate)
:map <leader>tw <Action>(ActivateProjectToolWindow)
" toggle line number relative
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber number
  endif
endfunction
nnoremap <leader><Tab> :call NumberToggle()<CR>

" toggle which-key plugin
let s:whichKeyEnabled = 0
function! WhichKeyToggle()
  if s:whichKeyEnabled
    set which-key!
    set notimeout!
    let s:whichKeyEnabled = 0
  else
    set which-key
    set notimeout
    let s:whichKeyEnabled = 1
  endif
endfunction
nnoremap <leader>8 :call WhichKeyToggle()<CR>

" source
:map <leader>9 <Action>(IdeaVim.ReloadVimRc.reload)
noremap <UP> <nop>
noremap <DOWN> <nop>
noremap <LEFT> gT
noremap <RIGHT> gt
nmap <c-;> :action AceLineAction<CR>
nmap <c-a-;> :action AceTargetAction<CR>
