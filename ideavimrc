"======================================================================
" Vim Configuration
" Author: [saul]
" Last Updated: [2024/11/03]
"======================================================================

"======================================================================
"VIM CHEAT SHEET
"--------------------------------------------------------------
"{n}gg {n}G      " goto line {n}, default first, last line of buffer
"{n}|            " jump to screen column {n} of current line
"yl              " yank a single character (l = to the right)
"vy              " yank a single character (using VISUAL mode)
"----------------------------------------------------------------------

"======================================================================
" Global Commands
"--------------------------------------------------------------
" Delete lines matching a pattern across the entire file
":g/re/d                - Delete lines matching regex 're'
"/\v\<\/?\w+\>          - Match HTML tags globally
":g//d                  - Delete all empty lines

" Collect TODOs to the Register
":g/someword/yank A     - Copy lines containing 'someword' to register A

" Move TODOs to the End of the File
":g/someword/t$         - Move lines containing 'someword' to the end of the file

" Delete lines not containing 'href'
":v/href/d              - Delete all lines that do not contain 'href'
"======================================================================

"======================================================================
" Substitution Mode
"----------------------------------------------------------------------
" Syntax: [range]s[ubstitute]/{pattern}/{string}/[flags]
" Flags:
"   g - Global replacement
"   c - Confirm each replacement
"   n - Report the number of matches
"   I - Ignore case in matching
"----------------------------------------------------------------------

"Substitution examples
"----------------------------------------------------------------------
":%s/fred/joe/igc                " general substitute command
":%s/\r//g                       " delete DOS Carriage Returns (^M)
"----------------------------------------------------------------------
":'a,'bg/fred/s/dick/joe/gc      " VERY USEFUL
"命令 :'a,'bg/fred/s/dick/joe/gc 的作用是：
"在 Vim 中，从标记 a 到标记 b 之间的行范围内，找到所有包含字符串 fred 的行。
"在这些找到的行中，将所有出现的 dick 替换为 joe。
"每次替换之前，Vim 都会询问用户是否确认替换。
"----------------------------------------------------------------------
":s/\(.*\):\(.*\)/\2 : \1/       " reverse fields separated by :
"" non-greedy matching \{-}      " `:help /\{-}`
":%s/^.\{-}pdf/new.pdf/          " to first pdf)
":s/fred/<c-r>a/g                " substitute 'fred' with contents of register 'a'
":%s/^\(.*\)\n\1/\1$/            " delete duplicate lines
"" running multiple commands
":%s/suck\|buck/loopy/gc         " ORing
":s/__date__/\=strftime("%c")/   " insert datestring
":%s/\f\+\.gif\>/\r&\r/g | v/\.gif$/d | %s/gif/jpg/
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" Special Substitution Symbols:
"----------------------------------------------------------------------
"\r - Insert a newline
"\t - Insert a tab
"\\ - Insert a backslash
"\1 - Insert first captured group
"\2 - Insert second captured group
"\0 - Insert entire matched pattern
"&  - Repeat the matched pattern
"\s - Insert whitespace
"~  - Use the last substitution string
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" Conditional Matching:
"hello world  ->   hello world  Pragmatic Vim
"----------------------------------------------------------------------
"/Pragmatic\ze Vim     - Match 'Pragmatic' only if it's immediately followed by 'Vim'
"/hello\zs world       - Match 'world' only if it's immediately preceded by 'hello'
"======================================================================

"======================================================================
" REGULAR EXPRESSIONS
"----------------------------------------------------------------------
" Very Magic Mode
" Use the very magic mode to simplify regex syntax
":/\v : Activate very magic regex mode
"
" HTML Tag Matching
" Match HTML tags globally
"/\v\<\/?\w+\>
"
" Remove Empty Lines
" Delete all empty lines using a global command
":g//d
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" CSS COLOR MATCHING
"----------------------------------------------------------------------
" Examples of CSS color properties
"body   {color:#3c3c3c;}
"a   {color:#0000EE;}
"strong   {color:#000;}
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" Match 6 or 3 hex digits for colors
"----------------------------------------------------------------------
"/\v#(\x{6}|\x{3})
" Alternative shorter version
"shorter version: /\v#(\x{6}|\x{3})
"----------------------------------------------------------------------

"----------------------------------------------------------------------
"REGEX SEARCH EXAMPLES
"----------------------------------------------------------------------
"/^fred.*joe.*bill           " line beginning with fred, followed by joe then bill
"/^[A-J]                     " line beginning A-J
"/^[A-J][a-z]\+\s            " line beginning A-J then one or more lowercase characters then space or tab
"/fred\_.\{-}joe             " fred then anything then joe (over multiple lines)
"/fred\_s\{-}joe             " fred then any whitespace (including newlines) then joe
"/fred\|joe                  " fred OR joe
"----------------------------------------------------------------------

"======================================================================
" Magic Search Modes
"----------------------------------------------------------------------
" Very Magic Search Mode:
" Use 'v' to simplify regex patterns with very magic mode.
" Command: /\v
" Example:
"   /\v#(\x{6}|\x{3}) - Match hexadecimal color codes like #fff or #ff00ff in a concise pattern.
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" Very NoMagic Search Mode:
" Minimize special characters' magic by using very nomagic.
" Command: /\V
" Example:
"   /\Va.k.a - Match 'a.k.a' precisely as it appears, without treating any characters as special.
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" Identifying Repeated Words
"----------------------------------------------------------------------
" Command: /\v<(\w+)\_s+\1+>
"----------------------------------------------------------------------
" Description:
"   This regex matches consecutive, duplicate words separated by spaces, helping to clean up textual redundancies.
"----------------------------------------------------------------------
" Example:
"   The phrase 'Hello Hello' will be detected, showcasing the regex's ability to identify and target repeats.
"----------------------------------------------------------------------
" Usage:
"   To find and possibly replace repeated words, apply this pattern in your search and replace commands.
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" Adjusting Case with Regex
"----------------------------------------------------------------------
" Command: gUgn
"----------------------------------------------------------------------
" Example Definitions:
"   class XhtmlDocument < XmlDocument; end
"   class XhtmlTag < XmlTag; end
"----------------------------------------------------------------------
" Description:
"   The 'gUgn' command converts the first match from your search into uppercase, aiding in data normalization or emphasis.
"----------------------------------------------------------------------
" Additional Info:
"   Combine 'gUgn' with \C to ensure the case sensitivity is respected across the matches.
"----------------------------------------------------------------------
" Example:
"   Search with '/\vX(ht)?ml\C', then use 'gUgn' to capitalize the first occurrence of HTML or XHTML, regardless of original case.
"----------------------------------------------------------------------

"======================================================================
" Exploring Regex Patterns in Vim
"----------------------------------------------------------------------
" Learn how to leverage Vim's powerful regex capabilities to effectively manage and manipulate quoted strings.
"----------------------------------------------------------------------

"----------------------------------------------------------------------
" Example Usage: Detecting and Managing Quoted Words
"----------------------------------------------------------------------
" Below are regex patterns designed to match quoted words in text, each catering to different nuances in content.

" Regex Pattern 1: /\v'.+'
" Description:
"   Matches a sequence enclosed in single quotes, capturing the longest possible string, including inner quotes.
" Example:
"   Matches 'quoted', 'two' quoted 'words', 'string doesn't make things easy'.
"   This pattern is greedy, aiming to capture as much as possible between the first and last quote in its scope.

" Regex Pattern 2: /\v'[^']+'
" Description:
"   Targets sequences within single quotes without including additional quotes inside the sequence.
" Example:
"   Matches 'quoted', 'two', 'words', does not extend beyond a closing quote unlike Pattern 1.
"   Ideal for extracting cleanly separated quoted words or phrases.

" Regex Pattern 3: /\v'([^']|'\w)+'
" Description:
"   Captures sequences inside quotes, allowing single quotes if followed by a word character, adjusting for possessives or contractions.
" Example:
"   Matches 'quoted', 'two', 'words', 'string doesn't make things easy'.
"   This complex pattern accommodates content with internal single quotes linked to alphabets, making it highly versatile.

"======================================================================
" These regex commands provide robust tools for editing and refining text with precision in Vim, enhancing your editing prowess.
"======================================================================

"================================================================================================================
" Vim Regex for Matching HTML/XML Tags with Example
"------------------------------------------------------------------------------------------------------------
" This document provides a detailed explanation of how to use regex to match HTML tags in code using Vim.
"================================================================================================================

" Regex Command: /\v<\/?\w+>
" Description:
"   The command uses Vim's 'very magic' mode to simplify the regex notation. It matches both opening and closing
"   HTML/XML tags.

" Example HTML Code:
"   <ol>
"   <li>
"     <a href="/episodes/show-invisibles/">Show invisibles</a>
"   </li>
"   <li>
"     <a href="/episodes/tabs-and-spaces/">Tabs and Spaces</a>
"   </li>
"   <li>
"     <a href="/episodes/whitespace-preferences-and-filetypes/">Whitespace preferences and filetypes</a>
"   </li>
"   </ol>

" Matching Process:
"   1. The pattern starts with the character '<', optionally followed by '/', to accommodate both opening and closing tags.
"   2. '\w+' captures the tag name, which consists of one or more word characters (letters, digits, or underscores).
"   3. The pattern is terminated by '>', marking the end of the tag.

" In the given HTML snippet:
"   - The tags <ol>, <li>, and <a> along with their corresponding closing tags </li>, </a>, and </ol> are matched.
"   - The regex specifically targets these elements:
"     * <ol> opens the ordered list.
"     * <li> tags encapsulate each list item.
"     * <a> tags within <li> elements enclose the hyperlinks.
"     * All respective closing tags are similarly identified, ensuring complete tag pairs are recognized.

" This approach effectively highlights the utility of the regex in identifying and potentially modifying or
" navigating through HTML structures within a Vim editing session, facilitating easier code management.
"======================================================================

"======================================================================
"MULTIPLE-CURSORS
"----------------------------------------------------------------------
"fp<C-N><C-N>cname to select next occurance of word under cursor and change it to name
"Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
"说明： 在普通模式下，按下 Ctrl+n 将会选中整个当前单词，并将光标移动到文档中下一个相同单词的位置。
"说明： 在可视模式下，按下 Ctrl+n 也会将光标移动到下一个相同的整个单词。
"hello world
"helloii world
"testing multiple cursors in IdeaVim
"hello world
"try multiple cursors
"hello world
"multiple examples to try
"hello NextWholeOccurrence 是完全匹配,而 NextOccurrence 是部分匹配
"----------------------------------------------------------------------
"==================================================
"ADD A CURSOR TO EACH LINE OF YOUR VISUAL SELECTION
" vip <C-N> <S-j> : change the whole paragraph to a single line
"use v select a letter ,and <c-n> to select the next letter and so on, then press <BS> to delete , <CR>to make vertical line
"%s/,/\r/g<CR>
"==============================
"separate lines with a single o
"vip<C-N>o
"========================
"separate line with c<CR>
"========================
"v<C-N>c<CR>c<CR>
"add '"' to
"==========
"TIPS:
"To delete blank lines between lines, use the following command:
"visual select code block you want to clean, then press <C-N> and <BS> to delete the blank lines.<CR>"
"======================================================================

"======================================================================
"VIMMULTICURSOR
"----------------------------------------------------------------------
"==============
"Usage
"Type mc (multicursor) and a vim command to create cursors
"Type ms (multiselect) and a vim command to select multiple items
"If you previously selected some text, then the commands work only in the selected text
"Supported vim commands: /, f, t, w, W, b, B, e, E
"Type mca (multicursor add) to add (or remove) a virtual caret
"Type mci (multicursor insert) to insert real carets instead of virtual
"Type mcd (multicursor delete) to remove all virtual carets
"======================================================================

"======================================================================
"COMMAND MODE
"----------------------------------------------------------------------
"============
" Moving a set of lines using the :m command
" '<,>'normal I//  : insert // at the beginning of a range of lines
" '<,>'normal A//  : append // at the end of a range of lines
" '<,>'t0          : copy the range of lines to the beginning of the file
" '<,>'t$          : copy the range of lines to the end of the file
" '<,>'m0          : move the range of lines to the beginning of the file
" '<,>'m$          : move the range of lines to the end of the file
" '<,>'m29         : move the range of lines to line 29
" :6.              : copy line 6 to the line where the cursor is located
" :t6.             : copy the line where the cursor is located to line 6
" :t.              : copy the line where the cursor is located to the line where the cursor is located  (duplicate the line) same as yyp
" :m.              : move the line where the cursor is located to the line where the cursor is located  (duplicate the line) same as yyp
" leader. :repeat the last command
" :normal . : repeat the last normal mode command
" :norm . : repeat the last normal mode command
" use * to search for the word under the cursor, and
" use :%s//newword/g to replace all occurrences of the word under the cursor with newword
"=====================================================================

"=====================================================================
"NERDTree
"----------------------------------------------------------------------
"====================================================================
"o	Open files, directories and bookmarks	g:NERDTreeMapActivateNode
"go	Open selected file, but leave cursor in the NERDTree	g:NERDTreeMapPreview
"t	Open selected node/bookmark in a new tab	g:NERDTreeMapOpenInTab
"T	Same as 't' but keep the focus on the current tab	g:NERDTreeMapOpenInTabSilent
"i	Open selected file in a split window	g:NERDTreeMapOpenSplit
"gi	Same as i, but leave the cursor on the NERDTree	g:NERDTreeMapPreviewSplit
"s	Open selected file in a new vsplit	g:NERDTreeMapOpenVSplit
"gs	Same as s, but leave the cursor on the NERDTree	g:NERDTreeMapPreviewVSplit
"O	Recursively open the selected directory	g:NERDTreeMapOpenRecursively
"x	Close the current nodes parent	g:NERDTreeMapCloseDir
"X	Recursively close all children of the current node	g:NERDTreeMapCloseChildren
"P	Jump to the root node	g:NERDTreeMapJumpRoot
"p	Jump to current nodes parent	g:NERDTreeMapJumpParent
"K	Jump up inside directories at the current tree depth	g:NERDTreeMapJumpFirstChild
"J	Jump down inside directories at the current tree depth	g:NERDTreeMapJumpLastChild
"<C-J>	Jump down to next sibling of the current directory	g:NERDTreeMapJumpNextSibling
"<C-K>	Jump up to previous sibling of the current directory	g:NERDTreeMapJumpPrevSibling
"r	Recursively refresh the current directory	g:NERDTreeMapRefresh
"R	Recursively refresh the current root	g:NERDTreeMapRefreshRoot
"m	Display the NERDTree menu	g:NERDTreeMapMenu
"q	Close the NERDTree window	g:NERDTreeMapQuit
"A	Zoom (maximize/minimize) the NERDTree window	g:NERDTreeMapToggleZoom
"d	Delete file or directory	g:NERDTreeMapDelete
"n	Create File	g:NERDTreeMapNewFile
"N	Create Directory	g:NERDTreeMapNewDir
"=====================================================================

"=====================================================================
"QUICKSCOPE
"----------------------------------------------------------------------
"Normally the { and } motions only match completely empty lines. With this plugin lines that only contain whitespace are also matched.
"=====================================================================

"=====================================================================
"COMENTARY
"----------------------------------------------------------------------
"set comentary 使用技巧: gcat 选中代码块，然后gc注释代码块,gc取消注释代码块
"set comentary 使用技巧: gcc 注释当前行,gc取消注释当前行
"set comentary 使用技巧: gcap 注释当前段落,gc取消注释当前段落
"set comentary 使用技巧: gcae 注释整个文件,gc取消注释整个文件
"=====================================================================

"=====================================================================
"ARGTEXTOBJ
"----------------------------------------------------------------------
"That is, such as 'daa'(delete-an-argument) 'cia'(change-inner-argument) 'via'(select-inner-argument).
"=====================================================================

"=====================================================================
"INSERT MODE OR BASH SHELL
"----------------------------------------------------------------------
"<c-h> to delete the previous character
"<c-w> to delete the word before the cursor
"<c-u> to delete the line from the cursor to the beginning of the line
"=====================================================================

"=====================================================================
"PRACTICAL VIM
"----------------------------------------------------------------------
" use dw. other than d2w
" use 2dw. other than d3w
" use daw to delete a word other than dbx bdw
" use <ESC>o to open a new line below the current line other than <CR>, because of smaller granularity
" use visual mode as a position marking system and use gv to go back to the last position
"`` : go back to the last position
"`. : go to the last change
" use mM `M to mark a global position and go back to it
"use df<space> to delete to the first space
"use cgnJSON<ESC> to change the next JSON ,and use . to change the next one.
"use dgn to delete the next JSON
"=====================================================================


"=====================================================================
"SEARCH MODE
"----------------------------------------------------------------------
" use /lang/e to search for lang and go to the end of the word
"example:
"aim to learn a new programming lang each year
"which lang did you pick up last year:
"which langs would you like to learn this year:
"=====================================================================

"=====================================================================
"TEXTOBJ-ENTIRE
"----------------------------------------------------------------------
"difference between ae and ie : ie exclude empty lines of the leading and trailing
"tips:gcae: comment the entire file
"=====================================================================

"=====================================================================
"EXCHANGE
"----------------------------------------------------------------------
"假设你想要替换一个段落中的某个词语 "oldword" 为 "newword"：
"首先，将 "newword" 复制到寄存器中。将光标放到 "newword" 上，然后输入 yiw。
"HH然后，移动光标到 "oldword" 上，并输入 griw。这会用 "newword" 替换 "oldword"。
"如果你想要替换整个文件中的 "oldword"，可以使用 gRiw。
"文本交换功能（类似 vim-exchange 插件）
"假设你有两个词 "bar" 和 "foo"，并想要交换它们的位置：
"bar foo
"将光标移动到 "foo" 上，然后输入 cxiw 来标记 "foo"。
"将光标移动到 "bar" 上，再次输入 cxiw，"foo" 和 "bar" 的位置就会交换。用 .  重复键就可以重复这个操作。
"如果你想要交换两个tag的位置，可以使用cxat
"如果你想要交换两个句子的位置，可以使用cxx
"=====================================================================

"=====================================================================
"SURROUND
"----------------------------------------------------------------------
"ysiw[：将光标所在的单词用中括号[]环绕。
"cs"{：将光标所在位置的一对双引号更改为大括号{}。
"ds)：删除光标所在位置的一对圆括号()。
"ysiw"：将光标所在的单词用双引号""环绕。
"ysit"：将光标所在的单词用标签<>环绕。
"ysat"：将光标所在的单词用标签<>环绕，并且包括标签。
"cst <div>：将光标所在位置的一对标签更改为<div>。
"dst : 删除光标所在位置的一对标签。
"选中需要surround的字段，大写的S，然后输入需要的符号
"hr= "dic.form" - sum 如果是带.的  用ysiW 或者
"或者 viW S"
" example  New york : vee S"  输入双引号
"=====================================================================

"=====================================================================
"ACEJUMP
"----------------------------------------------------------------------
"Press the keyboard shortcut for AceAction (Ctrl+; by default) to activate AceJump,Press the AceJump shortcut a second time to activate Declaration Mode, which is equivalent to the Navigate To action in the IDE. Press the AceJump shortcut three times before completing a tag to activate Target Mode. Once Target Mode is activated, jumping to a tag will select an entire word
"<c-s-;> :AceJump shortcut for Line Mode(Ctrl+Shift+; by default), to target the beginning, first non-whitespace, and last character of every line in the editor). Then jump to one by completing the tag.
"<c-a-;>: Target Mode can also be activated directly by pressing the shortcut for AceTargetAction (Ctrl+Alt+; by default).
"=====================================================================

"=====================================================================
" <c-m> minimize the current window
"----------------------------------------------------------------------

"=====================================================================
"MACRO MODE
"----------------------------------------------------------------------
"qq            : record keystrokes to register q
"your commands
"q             : quit recording
"@q            : execute commands again
"@@            : repeat
"22@q
":'<,'>normal @q : execute commands on a range of lines
"x= "+a+",+b+,+c+,+d+,+e+,+f+,+g+,+h+,+i+,+j+,+k+,+l+,+m+,+n+,+o+,+p+,+q+,+r+,+s+,+t+,+u+,+v+,+w+,+x+,+y+,+z+
"==============
"serial numbers
"==============
"one  to 1)one
"two   to 2)two
"three   to 3)three
"four     to 4)four
":let 1=1  qa I<c-r> = i<CR>)<ESC> :let i+=1 q  jVG :'<',>normal @q
"==========
"edit Macro
"==========
" :put a  : put a register a to the text
" make some change and add back to register a use: "ay$

"=====================================================================

"=====================================================================
"REGISTER MODE
"=============
":reg kisplay contents of allkregisters
"1p      : paste from register 1
"<C-r>0 paste the content of the register 0
"procticcal Vim, by Drew Neil
"Read Drew Neil's book,
"_d: black hole register
"=====================================================================

"=====================================================================
"INSERT MODE
"===========
"<C-r> = 7*22 <CR>  = 154 : insert 154
"=====================================
" gi got to the last place you left insert mode
"=====================================================================



"=====================================================================
let mapleader = " "
set scrolloff=5
set sidescrolloff=1
set nu
set linenumber
"set relativenumber
set ignorecase
set showcmd
set showmode
set history=3000000
set smartcase
set visualbell
set ideastatusicon=gray
set hlsearch
set incsearch
set noerrorbells
set clipboard+=unnamed
set clipboard=unnamedplus
set nocursorline
set keymodel=startsel,stopsel
set wrap
set breakindent
set ideaglobalmode
set idearefactormode=select
set ideajoin
set whichwrap=b,s,<,>,[,]
set virtualedit=onemore
set textwidth=100
set colorcolumn=100
set viminfo='100,<1000,s100
"=====================================================================

"=====================================================================
"PLUGINS
"=======
set textobj-entire
set textobj-indent
set multiple-cursors
set multicursor
set commentary
set vim-paragraph-motion
set easymotion
set notimeout
set nerdtree
set surround
set exchange
set ReplaceWithRegister
"=====================================================================

"=====================================================================
"ARGTEXTOBJ
"==========
set argtextobj
let g:argumentobject_force_toplevel = 1
let g:argtextobj_pairs="[:],(:),<:>"
"=====================================================================

"=====================================================================
"MATCHIT
"=======
set matchit
let b:matchit_ignorecase=1
"=====================================================================

"=====================================================================
"QUICKSCOPE
"==========
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:qs_primary_color = '#ff0000'
let g:qs_secondary_color = '#ff00ff'
let g:qs_accepted_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q']
"=====================================================================

"=====================================================================
"HIGHLIGHTEDYANK
"===============
set highlightedyank
let g:highlightedyank_highlight_color = "rgba(24, 241, 187)"
let g:highlightedyank_highlight_duration = 800
let g:highlightedyank_max_lines = 1000
let g:highlightedyank_highlight_in_visual = 0
"=====================================================================

"=====================================================================
"WHICH-KEY
"========
"SETTINGS
"=========
"set which-key
"=====================================================================
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_FontSize = 16
let g:WhichKeyDesc_surround_y = "y 增加tag surround插件"
let g:WhichKeyDesc_surround_ys = "ys 用于surround插件"
let g:WhichKeyDesc_surround_ysi = "ysi 用于surround插件"
let g:WhichKeyDesc_surround_yss = "yss 用于surround插件"
let g:WhichKeyDesc_surround_ysiw = "ysiw 用于surround插件"
let g:WhichKeyDesc_surround_yssb = "yssb 用于surround插件"
let g:WhichKeyDesc_surround_c = "c 用于surround插件"
let g:WhichKeyDesc_surround_cs = "cs 更改 surround插件"
let g:WhichKeyDesc_surround_cst = "cst 更改tag surround插件"
let g:WhichKeyDesc_surround_d = "d 用于surround插件"
let g:WhichKeyDesc_surround_ds = "ds 删除 surround插件"
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKeyDesc_NERDTreeOrNew = "<leader>n 目录树&新建"
let g:WhichKeyDesc_NERDTreeOrNew_NewDir = "<leader>nd 新建文件夹"
let g:WhichKeyDesc_NERDTreeOrNew_NewFile = "<leader>nf 新建文件"
let g:WhichKeyDesc_NERDTreeOrNew_NewClass = "<leader>nc 新建scratch文件"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKeyDesc_GotoTest = "gt 在源代码和测试代码之间快速切换"
"显示书签（Bookmarks）工具窗口，其中包含当前文件中设置的书签列表(Ctrl + F11)
let g:WhichKeyDesc_Show_Bookmarks = "<leader>bm 显示书签工具窗口"
let g:WhichKeyDesc_Show_Bookmarks = "<leader>bb 显示书签工具窗口"
let g:WhichKey_SortOrder = "by_key_prefix_first"
"=====================================================================
"CONFIGURATIONS
"==============
let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKeyDesc_leader_leader = "<leader><leader> Leader leader key"
let g:WhichKeyDesc_easymotion_z = "<leader><leader>z easymotion-jumptoanywhere"
let g:WhichKeyDesc_easymotion_n = "<leader><leader>v easymotion-vim-n"
let g:WhichKeyDesc_easymotion_N = "<leader><leader>N easymotion-vim-N"
let g:WhichKeyDesc_easymotion_L = "<leader><leader>L easymotion-fl"
let g:WhichKeyDesc_CodeAndClose_CloseAllEditorsButActive = "zq 关闭其他标签页"
let g:WhichKeyDesc_Show_FileStructure = "<leader>ss 显示文件结构"
let g:WhichKeyDesc_ExtractConstant = "<leader>ec 提取常量"
let g:WhichKeyDesc_ExtractVariable = "<leader>ev 引入变量"
let g:WhichKeyDesc_ExtractField = "<leader>ef 引入字段"
let g:WhichKeyDesc_Show = "<leader>s 显示&停止"
let g:WhichKeyDesc_ExtractMethod = "<leader>em 提取方法"
let g:WhichKeyDesc_MethodUp = "gm 将光标移动到上一个方法的声明处"
let g:WhichKeyDesc_easymotion = "s 快速跳转"
let g:WhichKeyDesc_CodeAndClose = "<leader>c Code&关闭"
let g:WhichKeyDesc_CodeAndClose_CloseAllEditors = "<leader>ca 关闭所有标签页"
let g:WhichKeyDesc_CodeAndClose_CodeCompletion = "<leader>cc 代码自动补全"
let g:WhichKeyDesc_CodeAndClose_CloseEditor = "<leader>cd 关闭当前标签页"
let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft 查找字符"
let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>ll 定位文件位置"
let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc 打开查找菜单"
let g:WhichKeyDesc_FindOrFormat_Format = "<leader>ff 格式化代码"

"=====================================================================
"=====================================================================
"🌍🌍🌍 No Leader Keymaps 🌍🌍🌍
"=====================================================================
"--普通模式下使用回车键，向下/向上 增加一行
nmap <CR> o<Esc>
nmap <S-Enter> O<Esc>

"--在普通和插入模式下，向下交换行/向上交换行
nnoremap <C-j> :m +1<CR>
nnoremap <C-k> :m -2<CR>
inoremap <C-j> <Esc> :m +1<CR>gi
inoremap <C-k> <Esc> :m -2<CR>gi
xnoremap <C-j> :m '>+1<cr>gv=gv
xnoremap <C-k> :m '<-2<cr>gv=gv

"Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j
nnoremap <TAB> :action NextTab<CR>
nnoremap <s-TAB> :action PreviousTab<CR>

nmap <HOME> ^
imap <HOME> ^
noremap <INSERT> A
noremap <PAGEUP> {
noremap <PAGEDOWN> }

nmap H h
nmap L l

"Easy visual indentation
vnoremap < <gv
vnoremap > >gv

"Jump between methods
nnoremap [[ :action MethodUp<cr>
nnoremap ]] :action MethodDown<cr>

"将光标移动到上一个方法的声明处
nmap gm <action>(MethodUp)
nmap gh gg<Action>(MethodDown)mxz<CR>5<C-y>`x

"=====================================================================
"🌸🌸🌸 Easymotion 🌸🌸🌸
"=====================================================================
"nmap s <Plug>(easymotion-s2)
"nmap S <Action>(AceBackwardAction)

nmap <leader>ca <action>(CloseAllEditors)
nmap <leader>cd :action CloseEditor<CR>
nmap <leader>cc <action>(CodeCompletion)

"Display options
nmap <leader>dd <action>(ToggleDistractionFreeMode)
nmap <leader>dz <action>(ToggleZenMode)
nmap <leader>df <action>(ToggleFullScreen)

"=====================================================================
"CHARACTER MANIPULATION
"======================
"Toggle case and start typing. E.g. <leader>iget: property -> getProperty
nmap <leader>i ~hi
nmap <leader>J Ji <ESC>
"=====================================================================

"=====================================================================
"COPY AND PASTE AND REPLACE
"==============
"gR replace 当前字符到行尾
nmap gR gr$
nnoremap y_ y^
"删除 从光标到行首
nnoremap d_ d^
nnoremap c_ c^

"重放EX命令
nnoremap <leader>. @:

"=====================================================================
nnoremap <Leader>sr :%s///gcI<left><left><left><left><left>
vnoremap sr y:%s///gcI<left><left><left><left><left><C-r>0<right>
"选中单词后,ss 会快速跳到下一个相同的单词
vnoremap ss y/<C-r>0<CR>
"=====================================================================

"=====================================================================
nnoremap U <C-r>
nmap L <action>(NextTab)
nmap H <action>(PreviousTab)
"=====================================================================
"e: Extract
"extract method/function 将选中的代码片段提取为一个独立的方法(Ctrl + Alt + M)
vmap <leader>em <action>(ExtractMethod)
vmap <leader>ec <action>(IntroduceConstant)
"extract field （引入字段）的重构操作:将选中的代码片段转化为一个新的字段，并自动将选中的代码片段替换为对该字段的引用(Ctrl + Alt + F)
vmap <leader>ef <action>(IntroduceField)

"extract variable （引入变量）的重构操作:将选中的代码片段抽取为一个新的变量，并自动替换选中的代码片段为新的变量引用(Ctrl + Alt + V)
vmap <leader>ev <action>(IntroduceVariable)
"========== s ==========
"显示当前打开文件的文件结构弹出窗口，其中包含文件中的类、方法、字段等结构(Alt + 7)
nmap <leader>ss <action>(FileStructurePopup)

"用于显示方法或函数的参数信息(Ctrl + p)
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sp 显示方法或函数的参数信息"
nmap <leader>sp <action>(ParameterInfo)
"Stop
let g:WhichKeyDesc_Show_Stop = "<leader>st 停止运行"
nmap <leader>st <action>(Stop) <actios(Stop)
"========== z ==========
let g:WhichKeyDesc_Zip = "<leader>z 折叠"
"展开所有代码折叠区域(Ctrl + Shift + 加号键)
let g:WhichKeyDesc_Zip_unZipAll = "zo 展开所有折叠"
nmap zo <action>(ExpandAllRegions)
nmap zx <action>(CollapseRegion)
"折叠所有代码折叠区域(Ctrl + Shift + 减号键)
nmap zc <action>(ExpandRegion)
"========== w ==========
"Vim 的命令 :e, :sp, :vsp 是支持的。
"关闭其他标签页
nmap zq <action>(CloseAllEditorsButActive)
"向右拆分标签页
let g:WhichKeyDesc_Windows_Move_MoveTabRight = "zr 向右拆分标签页"
nmap zr <action>(MoveTabRight)
"向下拆分标签页
let g:WhichKeyDesc_Windows_Move_MoveTabDown = "zd 向下拆分标签页"
nmap zd <action>(MoveTabDown)
"在另一边打开（前提是有另一边的分割窗口）
let g:WhichKeyDesc_Windows_Move_MoveEditorToOppositeTabGroup = "zm 在另一边打开"
nmap zm <action>(MoveEditorToOppositeTabGroup)
nmap z/ <action>(MoveEditorToOppositeTabGroup)
"向右复制标签页
let g:WhichKeyDesc_Windows_Move_SplitVertically = "zv 竖向分割"
nmap zv <action>(SplitVertically)
"水平分割
let g:WhichKeyDesc_Windows_Move_SplitHorizontally = "zs 水平分割"
nmap zs <action>(SplitHorizontally)
"取消所有分割窗口
let g:WhichKeyDesc_Windows_UnsplitAll = "za 取消所有分割窗口"
nmap za <action>(UnsplitAll)
"关闭当前窗口或分割窗格
"取消拆分当前分割窗口
let g:WhichKeyDesc_Windows_Unsplit = "zu 取消拆分当前分割窗口"
nmap zu <action>(Unsplit)
"关闭提示窗口

"====================debug&&run====================================
let g:WhichKeyDesc_RunOrRe = "<leader>r 运行&重新"
"运行当前编辑器中的文件或类(Shift + F10)
let g:WhichKeyDesc_RunOrRe_RunCalss = "<leader>rc 运行当前文件"
nmap <leader>rc :action RunClass<CR>
"重新运行最近一次运行的程序或测试(Ctrl+Shift + F10)
"重新运行最近一次运行的测试（Unit Tests）(Ctrl + Shift + F10)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt 重新运行Test"
nmap <leader>rt <action>(RerunTests)
"在代码中快速更改一个标识符的名称，并自动处理所有相关的引用(Shift + F6)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn 重构"
map <leader>rn <action>(RenameElement)
"运行
let g:WhichKeyDesc_RunOrRe_Run = "<leader>ru 运行"
map <leader>ru <action>(Run)
"打断点/解除断点
let g:WhichKeyDesc_DebugOrDelete_BreakPoint = "<leader>dp 打断点/解除断点 "
nmap <leader>dp <Action>(ToggleLineBreakpoint)
"调试
let g:WhichKeyDesc_DebugOrDelete_DeBug = "<leader>db 调试"
nmap <leader>db <Action>(Debug)
"====================debug&&run====================================
"使用idea的join代替原始的j
"跳转到行内下一个指定字符
nmap <leader><leader>f <Plug>(easymotion-bd-f)
let g:WhichKeyDesc_easymotion_f = "<leader><leader>f 跳转到行内下一个指定字符"
"跳转到行内上一个指定字符
nmap <leader><leader>F <Plug>(easymotion-F)
let g:WhichKeyDesc_easymotion_F = "<leader><leader>F 跳转到行内上一个指定字符"
"跳转到行内下一个指定字符前的位置
nmap <leader><leader>t <Plug>(easymotion-bd-t)
let g:WhichKeyDesc_easymotion_t = "<leader><leader>t 跳转到行内下一个指定字符前的位置"
"跳转到行内上一个指定字符后的位置
nmap <leader><leader>T <Plug>(easymotion-bd-T)
let g:WhichKeyDesc_easymotion_T = "<leader><leader>T 跳转到行内上一个指定字符后的位置"
"快速前进到下一个单词开头
nmap <leader><leader>w <Plug>(easymotion-bd-w)
let g:WhichKeyDesc_easymotion_w = "<leader><leader>w 快速前进到下一个单词开头"
"快速后退到上一个单词开头
nmap <leader><leader>W <Plug>(easymotion-bd-W)
let g:WhichKeyDesc_easymotion_W = "<leader><leader>W 快速后退到上一个单词开头"
"快速前进到下一个单词结尾
nmap <leader><leader>b <Plug>(easymotion-bd-b)
let g:WhichKeyDesc_easymotion_b = "<leader><leader>b 快速前进到下一个单词结尾"
"快速后退到上一个单词结尾
nmap <leader><leader>B <Plug>(easymotion-bd-B)
let g:WhichKeyDesc_easymotion_B = "<leader><leader>B 快速后退到上一个单词结尾"
"向前跳转到单词结尾
nmap <leader><leader>e <Plug>(easymotion-bd-e)
let g:WhichKeyDesc_easymotion_e = "<leader><leader>e 向前跳转到单词结尾"
"向后跳转到单词结尾
nmap <leader><leader>E <Plug>(easymotion-bd-E)
let g:WhichKeyDesc_easymotion_E = "<leader><leader>E 向后跳转到单词结尾"
"向前跳转到单词结尾（排除行尾）
nmap <leader><leader>ge <Plug>(easymotion-ge)
let g:WhichKeyDesc_easymotion_ge = "<leader><leader>ge 向前跳转到单词结尾（排除行尾）"
"向后跳转到单词结尾（排除行尾）
nmap <leader><leader>gE <Plug>(easymotion-gE)
let g:WhichKeyDesc_easymotion_gE = "<leader><leader>gE 向后跳转到单词结尾（排除行尾）"
"向下跳转到行首
nmap <leader><leader>j <Plug>(easymotion-bd-jk)
nmap <leader>jj <Plug>(easymotion-bd-jk)
let g:WhichKeyDesc_easymotion_j = "<leader><leader>j 向下跳转到行首"
"向上跳转到行首
nmap <leader><leader>k <Plug>(easymotion-k)
let g:WhichKeyDesc_easymotion_k = "<leader><leader>k 向上跳转到行首"
"查找下一个与最后一个查找项匹配的单词

"查找上一个与最后一个查找项匹配的单词
nmap <leader><leader>N <Plug>(easymotion-bd-N)
let g:WhichKeyDesc_easymotion_N = "<leader><leader>N 查找上一个与最后一个查找项匹配的单词"
"跳转到任意位置
nmap <leader><leader>s <Plug>(easymotion-bd-s)
let g:WhichKeyDesc_easymotion_s = "<leader><leader>s 跳转到任意位置"
"easymotion-jumptoanywhere
nmap <leader><leader>z <Plug>(easymotion-jumptoanywhere)
"easymotion-vim-n
nmap <leader><leader>n <Plug>(easymotion-vim-n)
"easymotion-vim-N
nmap <leader><leader>N <Plug>(easymotion-vim-N)
nmap <leader><leader>l <Plug>(easymotion-bd-fl)
"映射C-H 为ide的替换功能
nmap <C-H> :action Replace<CR>
nmap <C-n> <Plug>NextWholeOccurrence
vmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
vmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <C-p> <Plug>RemoveOccurrence
nmap <A-n> <Plug>AllWholeOccurrences
xmap <A-n> <Plug>AllWholeOccurrences
nmap g<A-n> <Plug>AllOccurrences
xmap g<A-n> <Plug>AllOccurrences
map <tab><tab> <action>(RecentLocations)
nmap == <action>(ReformatCode)
"nmap `` <action>(FileStructurePopup)
" add bookmark
nmap `2 <action>(ShowBookmarks)
nmap `1 <action>(ToggleBookmark)
nnoremap <leader><enter> :action ShowBookmarks<CR>
nmap <c-m> <action>(ToggleBookmark)
nmap <tab>q <Action>(GotoImplementation)

" CamelCaseMotion approximation (obsolete with WIP proper CamelCaseMotoin plugin)
" Missing inner word motions e.g. i<leader>w
nmap <leader>w [w
nmap <leader>b [b
nmap <leader>e ]w
"nmap <leader>ge ]b
nmap <leader>ge :action GotoNextError<CR>
" let g:camelcasemotion_key='<leader>'
" set CamelCaseMotion

" CCM's inner motions are a bit weird. Arguably, they should be an actual text object,
" like how vim-text-obj-variable-segment does it. On the other hand v[count]i\b can't
" be done without a motion. These maps give us best of both worlds
" xnoremap iv i\e
" onoremap iv i\e
" xnoremap av i\w
" onoremap av i\w
nnoremap <Leader>z :action ToggleZenMode<CR>
vnoremap ++ :NERDTreeFind<CR>
nnoremap ++ :NERDTreeFind<CR>
vnoremap gf :NERDTreeFind<CR>
nnoremap gf :NERDTreeFind<CR>
nmap \\\\ :action GotoImplementation<CR>
"shift zz  是关闭现在的窗口
nmap <BS> :action JumpToLastChange<CR>
nmap <S-BS> :action JumpToNextChange<CR>
nmap -- :action MoveEditorToOppositeTabGroup<CR>
nmap <tab>w :action RecentChanges<CR>
"After block yank and paste, move cursor to the end of operated text and don't override register
vnoremap p "_dP`]
nnoremap p p`]
"Y yank whole line by default
vnoremap y ygv<Esc>$
nnoremap Y y$
"xnoremap Y <Esc>y$gv

"在普通模式下，按 x 删除单个字符，不放入默认寄存器
"在普通模式下，按 x 删除单个字符，不放入默认寄存
nnoremap x "_x


"在普通模式下，将 X 变为删除操作符，不污染默认寄存器
nmap X "_d

"XX 删除整行，不放入默认寄存器
nmap XX "_dd

"在可视模式下，X 和 x 删除选中内容，不放入默认寄存器
vmap X "_d
vmap x "_d
" don't yank to default register when changing something
nnoremap c "xc
xnoremap c "xc

" Change line, better use S for this.
"nmap cc 1S
" Copy Word
nmap ,c yiw
" Select word
nmap ,v viw
" Yank and paste from clipboard
nnoremap ,y "+y
vnoremap ,y "+y
nnoremap ,yy "+yy
nnoremap ,p "+p
" Reselect last-pasted text
nnoremap gp `[v`]
" Center screen when jumping to next match
nnoremap n nzz
nnoremap N Nzz
vnoremap n nzz
vnoremap N Nzz
" easy window navigation
nnoremap <a-k> gT
nnoremap <a-j> gt
nnoremap <c-s-tab> :action PreviousTab<CR>
nnoremap <c-tab> :action NextTab<CR>
" stuff
" bookmarks
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>nb :NERDTreeFromBookmark
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)


noremap <UP> k
noremap <DOWN> j
noremap <LEFT> ^
noremap <RIGHT> g_

"=====================================================================
" Center screen when moving up and down
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
vnoremap <C-u> <C-u>zz
vnoremap <C-d> <C-d>zz
" built-in navigation to navigated items works better
nnoremap <c-o> :action Back<cr>
nnoremap <c-i> :action Forward<cr>
" but preserve ideavim defaults
nnoremap g<c-o> <c-o>
nnoremap g<c-i> <c-i>
"=====================================================================

"nmap <s-9> 0
"nmap <s-0> $
nnoremap <esc> <esc>:noh<return>
nnoremap <leader>nn :NERDTreeFind<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nmap <leader>ft <action>(FindInPath)
"========== n ==========
nmap <leader>nd <action>(NewDir)
nmap <leader>nf <action>(NewFile)
"=====================================================================
"IDEA SHORTCUTS
"==============
" reactivate some IDEA shortcuts
:map <leader>1 <Action>(Run)
:map <leader>2 <Action>(Debug)
:map <leader>0 <Action>(Stop)
" code Refactoring
:map <leader>rr <Action>(RenameElement)
:map <leader>RR <Action>(Refactorings.QuickListPopupAction)
:map <leader>sw <Action>(SurroundWith)
:map <leader>oi <Action>(OptimizeImports)
" other things
:map <leader>an <Action>(Annotate)
:map <leader>tw <Action>(ActivateProjectToolWindow)
"=======================================================
"=====================================================================
:map <leader>er <Action>(QuickJavaDoc)
:map <leader>ee <Action>(ShowErrorDescription)
:map <leader>hh <Action>(QuickImplementations)
:map <leader>hj <Action>(ShowHoverInfo)
" breakpoints
:map <leader>ub <Action>(ToggleLineBreakpoint)
:map <leader>us <Action>(ViewBreakpoints)
:map <leader>ur <Action>(Debugger.RemoveAllBreakpoints)
nmap gt <action>(GotoTest)
"Actions
nmap <leader>am <action>(ShowIntentionActions)
nmap <leader>as <action>(SearchEverywhere)

"File navigation
nmap <leader>fc <action>(GotoAction)
nmap <leader>ff <action>(ReformatCode) | <action>(OptimizeImports)
nmap <leader>fl <action>(SelectInProjectView)
nmap <leader>fr <action>(RecentFiles)
nmap <leader>ll <action>(RecentLocations)

"Close active tab
nmap <leader>q <action>(CloseContent)
nmap <leader>en <Action>(ReSharperGotoNextErrorInSolution)
nmap <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

"Git windows
nmap <leader>gb <Action>(Forward)
nmap <leader>gb <Action>(Git.Branches)
nmap <leader>gc <Action>(CheckinProject)
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gf <Action>(Back)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gs <Action>(ActivateVersionControlToolWindow)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nnoremap <Leader>gg :action ActivateCommitToolWindow<CR>
nnoremap <leader>gF :action Vcs.UpdateProject<CR>
nnoremap <leader>ga :action Annotate<CR>
nnoremap <leader>gl :action Vcs.Show.Log<CR>
nnoremap <leader>go :action Vcs.QuickListPopupAction<CR>
nnoremap <leader>gr :action Vcs.RollbackChangedLines<CR>
nnoremap <leader>gss :action Git.Stash<CR>
nnoremap <leader>gsu :action Git.Unstash<CR>
nnoremap gD :action FindUsages<CR>
nnoremap gb :action JumpToLastChange<CR>
nnoremap go :action GotoOverride<CR>
nnoremap gr :action RecentFiles<CR>
nnoremap gs :action Switcher<CR>
nnoremap gtd :action GotoTypeDeclaration<CR>
nnoremap gtt :action GotoTest<CR>
"nnoremap gu :action FindUsages<CR>
vnoremap gD :action FindUsages<CR>
vnoremap gtd :action GotoTypeDeclaration<CR>
vnoremap gtt :action GotoTest<CR>
unmap <leader>gf
nnoremap <leader>gf :action Git.Fetch<CR>
nnoremap <leader>gf :action Vcs.ShowTabbedFileHistory<CR>
"内置搜索优化
nnoremap g/ :action Find<cr>
nmap <leader>t <Action>(ActivateTerminalToolWindow)
nnoremap <leader>aa :action ShowIntentionActions<CR>
nnoremap <Leader>, :action RecentFiles<CR>
vnoremap <Leader>, :action RecentFiles<CR>
nnoremap <leader>ns :action NewScratchFile<CR>
vnoremap <leader>ns :action NewScratchFile<CR>
nnoremap <leader>nc :action Scratch.ChangeLanguage<CR>
vnoremap <leader>nc :action Scratch.ChangeLanguage<CR>

nnoremap <Leader>hc :action CallHierarchy<CR>
"noremap <Leader>in :action Inline<CR>
nnoremap <leader>mrin    :action Inline<CR>
vnoremap <leader>mrin    <Esc>:action Inline<CR>

"noremap <Leader>ev :action IntroduceVariable<CR>
nnoremap <leader>mrev    :action IntroduceVariable<CR>
vnoremap <leader>mrev    <Esc>:action IntroduceVariable<CR>

"noremap <Leader>ep :action IntroduceParameter<CR>
nnoremap <leader>mrep    :action IntroduceParameter<CR>
vnoremap <leader>mrep    <Esc>:action IntroduceParameter<CR>

"noremap <Leader>ec :action IntroduceConstant<CR>
nnoremap <leader>mrec    :action IntroduceConstant<CR>
vnoremap <leader>mrec    <Esc>:action IntroduceConstant<CR>

"noremap <Leader>ef :action IntroduceField<CR>
nnoremap <leader>mref    :action IntroduceField<CR>
vnoremap <leader>mref    <Esc>:action IntroduceField<CR>

"remap * function when text selected
vnoremap * y <Esc>/<C-r>0<CR>

"remap & in normal mode to repeat last substitution
nnoremap & :&&<CR>
xnoremap & :&&<CR>

"emulate ctags
nmap <c-\>s :action CallHierarchy<CR>

"remap <c-q> to <c-v>
nnoremap <c-q> <c-v>

" toggle line number relative
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber number
  endif
endfunction
nnoremap <leader><Tab> :call NumberToggle()<CR>

" toggle which-key plugin
let s:whichKeyEnabled = 0
function! WhichKeyToggle()
  if s:whichKeyEnabled
    set which-key!
    set notimeout!
    let s:whichKeyEnabled = 0
  else
    set which-key
    set notimeout
    let s:whichKeyEnabled = 1
  endif
endfunction
nnoremap <leader>8 :call WhichKeyToggle()<CR>

" source
:map <leader>9 <Action>(IdeaVim.ReloadVimRc.reload)

function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'enable', 'disable', 'show', 'hide', 'open', 'close', 'start', 'stop', 'begin', 'end', 'lock', 'unlock', 'expand', 'collapse', 'increase', 'decrease', 'increment', 'decrement', 'connect', 'disconnect', 'mount', 'unmount', 'press', 'release', 'accept', 'reject', 'add', 'remove', 'insert', 'delete', 'create', 'destroy', 'load', 'unload', 'on', 'off', 'up', 'down', 'visible', 'invisible', 'fixed', 'flexible', 'light', 'dark', 'next', 'previous', 'forward', 'backward', 'allow', 'deny', 'enabled', 'disabled', 'positive', 'negative', 'ascending', 'descending', 'valid', 'invalid', 'synchronous', 'asynchronous', 'active', 'inactive', 'serialize', 'deserialize', 'compress', 'decompress', 'encrypt', 'decrypt', 'expand', 'contract', 'zoomin', 'zoom-out', 'push', 'pull', 'flash', 'steady', 'manual', 'automatic','True', 'False', 'Enable', 'Disable', 'Show', 'Hide', 'Open', 'Close', 'Start', 'Stop', 'Begin', 'End', 'Lock', 'Unlock', 'Expand', 'Collapse', 'Increase', 'Decrease', 'Increment', 'Decrement', 'Connect', 'Disconnect', 'Mount', 'Unmount', 'Press', 'Release', 'Accept', 'Reject', 'Add', 'Remove', 'Insert', 'Delete', 'Create', 'Destroy', 'Load', 'Unload', 'On', 'Off', 'Up', 'Down', 'Visible', 'Invisible', 'Fixed', 'Flexible', 'Light', 'Dark', 'Next', 'Previous', 'Forward', 'Backward', 'Allow', 'Deny', 'Enabled', 'Disabled', 'Positive', 'Negative', 'Ascending', 'Descending', 'Valid', 'Invalid', 'Synchronous', 'Asynchronous', 'Active', 'Inactive', 'Serialize', 'Deserialize', 'Compress', 'Decompress', 'Encrypt', 'Decrypt', 'Expand', 'Collapse', 'Zoomin', 'Zoomout', 'Push', 'Pull', 'Flash', 'Steady', 'Manual', 'Automatic','last','first','Last','First']
  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction

nnoremap gX :set opfunc=Redact<CR>g@
nnoremap gx :set opfunc=function('Redact')<CR>g@
nnoremap gy :set opfunc={arg -> execute "normal `[v`]rx"}<CR>g@
function! Redact(type)
    execute "normal `[v`]rx"
endfunction

nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

function! CursorLineToggle()
if(&cursorline)
set nocursorline
else
set cursorline
endif
endfunction
nnoremap <F4> :call CursorLineToggle()<CR>
